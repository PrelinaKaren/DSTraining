name: Build DSTraining

on:
  push:
    branches: 
      - main
  pull_request:
    branches: 
      - main

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest]
        arch: [x86_64, arm64]

    steps:
      # 检出代码
      - name: Checkout code
        uses: actions/checkout@v3

      # 安装 CMake 和 Ninja
      - name: Install CMake and Ninja
        if: runner.os == 'Linux' || runner.os == 'macOS'
        run: |
          sudo apt-get update || brew update
          sudo apt-get install -y cmake ninja-build || brew install cmake ninja

      # 设置编译环境
      - name: Set up environment
        run: |
          case ${{ matrix.arch }} in
            x86_64)
              export CMAKE_FLAGS="-DCMAKE_SYSTEM_PROCESSOR=x86_64"
              ;;
            arm64)
              export CMAKE_FLAGS="-DCMAKE_SYSTEM_PROCESSOR=arm64"
              ;;
            *)
              echo "Unsupported architecture: ${{ matrix.arch }}"
              exit 1
              ;;
          esac
          echo "CMAKE_FLAGS=$CMAKE_FLAGS" >> $GITHUB_ENV

      # CMake 配置
      - name: Configure with CMake
        run: |
          cmake -S . -B build $CMAKE_FLAGS

      # CMake 构建
      - name: Build with CMake
        run: |
          cmake --build build --config Debug

      # 测试生成的二进制文件
      - name: Test the built executable
        run: |
          ./build/DSTraining --version || echo "Build Successful!"

      # 上传构建产物
      - name: Upload a Build Artifact
        uses: actions/upload-artifact@v4.5.0
        with:
          name: DSTraining-Binaries-${{ matrix.os }}-${{ matrix.arch }} # 确保每个任务的 Artifact 名称唯一
          path: ./build/
          if-no-files-found: error
          retention-days: 30
          compression-level: 6
          include-hidden-files: false
